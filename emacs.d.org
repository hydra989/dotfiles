#+TITLE: my .emacs.d
#+AUTHOR: Hayden Curfman
#+EMAIL: hcurfman@keemail.me
#+OPTIONS: num:nil

** General Settings

*** Mode Settings

#+begin_src emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (winner-mode 1)
  (pixel-scroll-mode 1)
  (fringe-mode '(1 . 1))      ;; "minimal" preset
#+end_src

*** setqs

#+begin_src emacs-lisp
  (setq
   ring-bell-function 'ignore ;; loadon't make noise
   vc-follow-symlinks t
   load-prefer-newer t        ;; prefer newer .elc...
   delete-old-versions t      ;; ..and delete old ones
   use-short-answers t        ;; y/n instead of yes/no
   make-backup-files nil
   create-lockfiles nil
   native-comp-deferred-compilation t
   comp-async-report-warnings-errors nil
   scroll-preserve-screen-position 1
   )
#+end_src

*** custom-set-variables

#+begin_src emacs-lisp
  (custom-set-variables
   '(org-directory "~/s/org")
   '(org-agenda-files (list "~/s/org/agenda")))
#+end_src

** Function & Hook Definitions

*** emacsclient-gui-setup

A setup function for GUI related things that needs run after emacsclient is opened.

#+begin_src emacs-lisp
  (defun emacsclient-gui-setup (frame)
    (select-frame frame)
    (load-theme 'wintermute t)
    (remove-hook 'after-make-frame-functions #'emacsclient-gui-setup)
    )

  (add-hook 'after-make-frame-functions #'emacsclient-gui-setup)
#+end_src

*** config-visit

#+begin_src emacs-lisp
  (defun config-visit()
    (interactive)
    (find-file "/home/hydra/s/dotfiles/emacs.d.org"))
#+end_src

*** full-auto-save

#+begin_src emacs-lisp
  (defun full-auto-save ()
    (interactive)
    (save-excursion
      (dolist (buf (buffer-list))
	(set-buffer buf)
	(if (and (buffer-file-name) (buffer-modified-p))
            (basic-save-buffer)))))
#+end_src

*** M-x kill-process

M-x kill-process to kill the current buffer's process. Stolen from somewhere, lost the source.

#+begin_src emacs-lisp
  (put 'kill-process 'interactive-form
       '(interactive
	 (let ((proc (get-buffer-process (current-buffer))))
	   (if (process-live-p proc)
	       (unless (yes-or-no-p (format "Kill %$ " proc))
		 (error "Process not killed"))
	     (error (format "Buffer %s has no process" (buffer-name))))
	   nil)))
#+end_src

*** split-and-follow-*

Split a window either direction and follow with focus. Stolen from [[https://github.com/daedreth/UncleDavesEmacs][Uncle Dave's Emacs.]]

#+begin_src emacs-lisp
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))

  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
#+end_src

** Packages

Set up package archives:

#+begin_src emacs-lisp
  (add-to-list 'package-archives
	       '("melpa" . "https://melpa.org/packages/"))
#+end_src

*** themes

Set up custom theme directory, currently home to [[https://github.com/rhipsalis-paradoxa/wintermute-theme][wintermute]] and [[https://github.com/konrad1977/oxocarbon-emacs][oxocarbon]]:

#+begin_src emacs-lisp
    (add-to-list 'custom-theme-load-path "/home/hydra/.emacs.d/themes")
#+end_src

Install the necessary theme packages:

#+begin_src emacs-lisp
  (use-package autothemer
    :ensure t)
  (use-package cyberpunk-theme
    :defer t)
  (use-package nordic-night-theme
    :defer t)
#+end_src

*** languages

#+begin_src emacs-lisp
  (use-package nix-mode
    :ensure t)
#+end_src

** org-mode

#+begin_src emacs-lisp
  (setq
   org-hide-emphasis-markers t ;; hide emphasis markup (*bold*, etc)
   org-startup-with-inline-images t
   org-cycle-separator-lines -1
   org-hide-leading-stars t
   )
#+end_src

visual-line-mode for long line wrapping:

#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'visual-line-mode)
#+end_src

org-indent-mode is problematic if it loads before the theme:

#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
#+end_src

** tree-sitter

#+begin_src emacs-lisp
  (setq treesit-language-source-alist
        '((bash "https://github.com/tree-sitter/tree-sitter-bash")
          (css "https://github.com/tree-sitter/tree-sitter-css")
          (elisp "https://github.com/Wilfred/tree-sitter-elisp")
          (go "https://github.com/tree-sitter/tree-sitter-go")
          (html "https://github.com/tree-sitter/tree-sitter-html")
          (java "https://github.com/tree-sitter/tree-sitter-java")
          (make "https://github.com/alemuller/tree-sitter-make")
          (markdown "https://github.com/ikatyung/tree-sitter-markdown")
          (python "https://github.com/tree-sitter/tree-sitter-python")
          )
        )

  (setq major-mode-remap-alist
        '((bash-mode . bash-ts-mode)
          (css-mode . css-ts-mode)
          (elisp-mode . elisp-ts-mode)
          (go-mode . go-ts-mode)
          (html-mode . html-ts-mode)
          (java-mode . java-ts-mode)
          (make-mode . make-ts-mode)
          (markdown-mode . markdown-ts-mode)
          (python-mode . python-ts-mode)
          ))

  (use-package nix-ts-mode
    :mode "\\.nix'")
#+end_src

** Keybindings

Windmove allows for movements between windows with S-<arrow> presses:

#+begin_src emacs-lisp
  (when (fboundp 'windmove-default-keybindings)
    (windmove-default-keybindings))
#+end_src

Set some keybinds for the functions defined earlier:

#+begin_src emacs-lisp
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
  (global-set-key (kbd "C-' c") 'config-visit)
  (global-set-key (kbd "C-' s") 'full-auto-save)
#+end_src
