From 20d5f428dc6e966bbfc473a6f16b636bc4bc569f Mon Sep 17 00:00:00 2001
From: Hayden Curfman <hcurfman@keemail.me>
Date: Thu, 2 Jun 2022 17:39:44 -0400
Subject: [PATCH] implement deity mode

---
 config.def.h |  11 ++++++
 dwm.c        | 108 +++++++++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 119 insertions(+)

diff --git a/config.def.h b/config.def.h
index 1c0b587..3472d88 100644
--- a/config.def.h
+++ b/config.def.h
@@ -113,3 +113,14 @@ static Button buttons[] = {
 	{ ClkTagBar,            MODKEY,         Button3,        toggletag,      {0} },
 };
 
+/* deity mode specifics */
+
+/* key to quit deity mode */
+#define DEITYEXITKEY XK_q
+/* deity modifier setup */
+static DeityMask deitymasks[] = {
+	/* modifier			mode arg */
+	{ ControlMask,			{1}},
+	{ ShiftMask,			{2}},
+	{ Mod1Mask,			{3}},
+};
diff --git a/dwm.c b/dwm.c
index 4465af1..bc6bb25 100644
--- a/dwm.c
+++ b/dwm.c
@@ -99,6 +99,11 @@ struct Client {
 	Window win;
 };
 
+typedef struct {
+	unsigned int mod;
+	const Arg arg;
+} DeityMask;
+
 typedef struct {
 	unsigned int mod;
 	KeySym keysym;
@@ -157,6 +162,10 @@ static void configure(Client *c);
 static void configurenotify(XEvent *e);
 static void configurerequest(XEvent *e);
 static Monitor *createmon(void);
+static XKeyEvent createxev(XEvent sev, int type, unsigned int mask, Window win);
+static void deitygrabkeys(void);
+static void deitymode(const Arg *arg);
+static void deitystate(const Arg *arg);
 static void destroynotify(XEvent *e);
 static void detach(Client *c);
 static void detachstack(Client *c);
@@ -174,6 +183,7 @@ static long getstate(Window w);
 static int gettextprop(Window w, Atom atom, char *text, unsigned int size);
 static void grabbuttons(Client *c, int focused);
 static void grabkeys(void);
+static void grabkeysdeity(unsigned int mode, int state);
 static void incnmaster(const Arg *arg);
 static void keypress(XEvent *e);
 static void killclient(const Arg *arg);
@@ -644,6 +654,50 @@ createmon(void)
 	return m;
 }
 
+XKeyEvent
+createxev(XEvent sev, int type, unsigned int mask, Window win)
+{
+	/* check pointer */
+	int root_x, root_y, win_x, win_y;
+	unsigned int mask_return;
+	Window root_return, child_window;
+	XQueryPointer(dpy, win, &root_return, &child_window,
+		      &root_x, &root_y, &win_x, &win_y, &mask_return);
+
+        XKeyEvent newev = {
+		.type = type,
+		.send_event = 1,
+		.display = dpy,
+		.window = win,
+		.root = root,
+		.subwindow = None,
+		.time = CurrentTime,
+		.x = win_x,
+		.y = win_y,
+		.x_root = root_x,
+		.y_root = root_y,
+		.state = mask,
+		.keycode = sev.xkey.keycode,
+		.same_screen = True
+        };
+	return newev; 
+}
+
+void
+deitygrabkeys()
+{
+	unsigned int j;
+	unsigned int modifiers[] = { 0, LockMask, numlockmask, numlockmask|LockMask };
+	
+	XUngrabKey(dpy, AnyKey, AnyModifier, root);
+	for (j = 0; j < LENGTH(modifiers); j++)
+		XGrabKey(dpy, AnyKey, modifiers[j], root, False, GrabModeAsync, GrabModeAsync);
+}
+
+void deitymode(const Arg *arg) { grabkeysdeity(arg->i, 0); }
+
+void deitystate(const Arg *arg) { grabkeysdeity(arg->i, 1); }
+
 void
 destroynotify(XEvent *e)
 {
@@ -963,6 +1017,60 @@ grabkeys(void)
 	}
 }
 
+void
+grabkeysdeity(unsigned int mode, int state)
+{
+    XEvent ev;
+	int exit = 0;
+	int keysyms, i;
+	/* default to control */
+	unsigned int god_modifier_mask = ControlMask;
+	
+	/* check mask */
+	for (i = 0; i < LENGTH(deitymasks); i++)
+		if (mode == deitymasks[i].arg.i)
+			god_modifier_mask = deitymasks[i].mod;
+
+	/* grab all keys */
+	deitygrabkeys();
+	
+	while (exit != 1)
+	{
+		XNextEvent(dpy, &ev);
+		if (ev.type == KeyPress)
+		{
+			KeySym *keysym = XGetKeyboardMapping(dpy, ev.xkey.keycode, 1, &keysyms);
+			
+			/* if state or not exit keycode */
+			if (state == 1 || keysym[0] != DEITYEXITKEY) {
+				XUngrabKey(dpy, AnyKey, AnyModifier, root);
+
+				Window winFocus;
+				int revert;
+				XGetInputFocus(dpy, &winFocus, &revert);
+
+				/* create and send the key events */
+				XKeyEvent newxev1 = createxev(ev, KeyPress, god_modifier_mask, winFocus);
+				XKeyEvent newxev2 = createxev(ev, KeyRelease, god_modifier_mask, winFocus);
+				XSendEvent(dpy, winFocus, True, KeyPressMask, (XEvent *)&newxev1);
+				XSendEvent(dpy, winFocus, True, KeyReleaseMask, (XEvent *)&newxev2);
+				XFlush(dpy);
+
+				/* reset */
+				deitygrabkeys();
+                        } else if (keysym[0] == DEITYEXITKEY)
+			{
+				exit = 1;	
+			}
+			if (state == 1) {
+				exit = 1;
+                        }
+			XFree(keysym);
+                }
+        }
+	grabkeys();
+}
+
 void
 incnmaster(const Arg *arg)
 {
-- 
2.34.1

