#+TITLE: my .emacs.d
#+AUTHOR: Hayden Curfman
#+EMAIL: hcurfman@keemail.me

* Contents                                                         :TOC_2_gh:
  - [[#general-settings][General Settings]]
  - [[#function-definitions][Function Definitions]]
  - [[#package-independent-keybindings][Package-Independent Keybindings]]
  - [[#general-purpose-packages][General Purpose Packages]]
  - [[#programming--lsp][Programming & LSP]]
  - [[#org-mode][org-mode]]
  - [[#miscelleneous][Miscelleneous]]

** General Settings

#+begin_src emacs-lisp
  (defvar *hostname*            (getenv "HOSTNAME"))
#+end_src

*** Mode Settings

#+begin_src emacs-lisp
  (scroll-bar-mode -1)    ;; disable scroll bar
  (tool-bar-mode -1)      ;; disable tool bar
  (menu-bar-mode -1)      ;; disable menu bar
  (winner-mode 1)         ;; C-c {left, right} for window manipulation
  (pixel-scroll-mode 1)   ;; smooth scrolling
  ;; !? -- dragons
  (fringe-mode 1)
  (global-auto-revert-mode 1)
#+end_src

*** Indentation with Tabs

Indentation with tabs has been hit-or-miss throughout my time with Emacs.
This seems janky but it's worked well enough for me thus far.

#+begin_src emacs-lisp
  (setq-default tab-width 4)
  (add-hook 'prog-mode-hook 'indent-tabs-mode)
#+end_src

*** General Settings (setqs)

#+begin_src emacs-lisp
  (setq
   backward-delete-char-untabify-method 'hungry  ;; hungry delete
   ring-bell-function 'ignore                    ;; don't make noise
   vc-follow-symlinks t                          ;; set with intention of
  ;;                                                playing nice with hardlinks
   load-prefer-newer t                           ;; prefer newer .elc...
   delete-old-versions t                         ;; ...and delete the old editions
   use-short-answers t                           ;; y/n instead of yes/no
   backup-by-copying t                           ;; don't delink hardlinks (?)
   c-default-style "linux"                       ;; set c style to something tolerable

   ;; don't clutter directories with backups
   make-backup-files nil
   create-lockfiles nil

   ;; frame resize settings
   frame-inhibit-implied-resize t                ;; shouldn't wildly resize during startup
   frame-resize-pixelwise t

   ;; elisp compiliation settings
   native-comp-deferred-compilation t
   comp-async-report-warnings-errors nil

   ;; dired
   dired-kill-when-opening-new-dired-buffer t    ;; don't allow dired to clutter up C-x b and soforth

   ;; !? -- dragons, relics of time past
   use-dialog-box nil
   echo-keystrokes 0.2
   )
#+end_src

*** Transparency

#+begin_src emacs-lisp
  (set-frame-parameter (selected-frame) 'alpha '(95 . 90))
  (add-to-list 'default-frame-alist '(alpha . (95 . 90)))
#+end_src

*** custom-set-variables

#+begin_src emacs-lisp
  (custom-set-variables
   '(org-directory "~/s/org")
   '(org-agenda-files (list "~/s/org/agenda")))
#+end_src


** Function Definitions

Previously stored in func.init.el.

*** daemon-gui-setup

A general setup function for GUI related tidbits that need to be ran
after emacsclient has started:

#+begin_src emacs-lisp
  (defun daemon-gui-setup (frame)
    (select-frame frame)
    (load-theme 'cyberpunk t)
    (set-frame-font "Terminus-11" t t)
    ;;(mini-modeline-mode t)
    (awesome-tray-mode 1)
    )

  ;; 1-6-22: not sure how this works when emacs itself is opened (not emacsclient)
  (add-hook 'after-make-frame-functions #'daemon-gui-setup)
#+end_src

*** config-visit

#+begin_src emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "/home/hydra/s/dotfiles/.emacs.d/init.el"))
#+end_src

*** create-scratch-buffer

Stolen from EmacsWiki.

#+begin_src emacs-lisp
  (defun create-scratch-buffer nil
    "create a scratch buffer"
    (interactive)
    (switch-to-buffer (get-buffer-create "*scratch*"))
    (lisp-interaction-mode))
    ;;(insert initial-scratch-message))
#+end_src

*** full-auto-save

Save all open buffers. Stolen from [[https://www.emacswiki.org/emacs/AutoSave#h5o-4][EmacsWiki]].

#+begin_src emacs-lisp
  (defun full-auto-save ()
    (interactive)
    (save-excursion
      (dolist (buf (buffer-list))
        (set-buffer buf)
        (if (and (buffer-file-name) (buffer-modified-p))
            (basic-save-buffer)))))
#+end_src

*** split-and-follow-*

Split a window either direction and follow with focus.
Stolen from [[https://github.com/daedreth/UncleDavesEmacs][Uncle Dave's Emacs]]:

#+begin_src emacs-lisp
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))

  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
#+end_src

*** (M-x) kill-process

Enable M-x kill-process (to kill the current buffer's process).
Stolen from somewhere, but I have no idea where.

#+begin_src emacs-lisp
  (put 'kill-process 'interactive-form
	   '(interactive
		 (let ((proc (get-buffer-process (current-buffer))))
		   (if (process-live-p proc)
			   (unless (yes-or-no-p (format "Kill %S? " proc))
				 (error "Process not killed"))
			 (error (format "Buffer %s has no process" (buffer-name))))
		   nil)))
#+end_src

*** hook: after-load-theme-hook

[[https://www.reddit.com/r/emacs/comments/4v7tcj/comment/d5wyu1r/?utm_source=share&utm_medium=web2x&context=3][stolen from this reddit comment]]

#+begin_src emacs-lisp
  (defvar after-load-theme-hook nil
    "Hook run after a color theme is loaded using `load-theme'.")
  (defadvice load-theme (after run-after-load-theme-hook activate)
    "Run `after-load-theme-hook'."
    (run-hooks 'after-load-theme-hook))
#+end_src


** Package-Independent Keybindings

Keybindings that are independent from packages. These
don't override bindings for other modes like org-mode (as
far as I can tell).

#+begin_src emacs-lisp
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
  (global-set-key (kbd "C-' c") 'config-visit)
  (global-set-key (kbd "C-' b") 'create-scratch-buffer)
  (global-set-key (kbd "C-' s") 'full-auto-save)
  (global-set-key (kbd "C-' t") 'vterm)
  (global-set-key (kbd "C-' a") 'org-agenda)
#+end_src

Windmove allows for movements between windows with S-<arrow> binds:

#+begin_src emacs-lisp
  (when (fboundp 'windmove-default-keybindings)
	(windmove-default-keybindings))
#+end_src


** General Purpose Packages

*** diminish

Diminish comes first because it's used throughout the rest
of the configuration.

1-8-22: Disabled diminish. awesome-tray hides minor modes by default.

#+begin_src emacs-lisp
  (use-package diminish
    ;; diminish whatever isn't a package
    ;;:config
    ;;(diminish 'eldoc-mode)
  )
#+end_src

*** avy

#+begin_src emacs-lisp
  (use-package avy
    :after evil
    :config
    (evil-define-key 'normal 'global (kbd "SPC") 'avy-goto-char))
#+end_src

*** bufler

#+begin_src emacs-lisp
  (use-package bufler
    :init
    ;; default/example config
    (bufler-defgroups
     (group
      (auto-workspace))
     (group
      (group-or "*Help/Info*"
                (mode-match "*Help*" (rx bos "help-"))
                (mode-match "*Info*" (rx bos "info-"))))
     (group
      (group-and "*Special*"
                 (lambda (buffer)
                   (unless (or (funcall (mode-match "Magit" (rx bos "magit-status"))
                                        buffer)
                               (funcall (mode-match "Dired" (rx bos "dired"))
                                        buffer)
                               (funcall (auto-file) buffer))
                     "*Special*")))
      (group
       (name-match "**Special**"
                   (rx bos "*" (or "Messages" "Warnings" "scratch" "Backtrace") "*")))
      (group
       (mode-match "*Magit* (non-status)" (rx bos (or "magit" "forge") "-"))
       (auto-directory))
      (auto-mode))
     (dir user-emacs-directory)
     (group
      ; Subgroup collecting buffers in `org-directory' (or "~/org" if
      ; `org-directory' is not yet defined).
      (dir (if (bound-and-true-p org-directory)
               org-directory
             "~/org"))
      (group
        (auto-indirect)
        (auto-file))
      (group-not "*special*" (auto-file))
      (auto-mode))
     (group
      (auto-project))
     (auto-directory)
     (auto-mode))
     :config
     (global-set-key (kbd "C-x C-b") 'bufler))
#+end_src

*** linum-relative

#+begin_src emacs-lisp
  (use-package linum-relative
    ;:diminish linum-relative-mode
    :defer t
    :hook (prog-mode . linum-relative-mode)
    :init
    (setq linum-relative-backend 'display-line-numbers-mode))
#+end_src

*** magit

#+begin_src emacs-lisp
  (use-package magit
    :config
    ;; https://github.com/magit/magit/issues/2541#issuecomment-180611059
    (setq magit-display-buffer-function
          (lambda (buffer)
            (display-buffer
             buffer (if (and (derived-mode-p 'magit-mode)
                             (memq (with-current-buffer buffer major-mode)
                                   '(magit-process-mode
                                     magit-revision-mode
                                     magit-diff-mode
                                     magit-stash-mode
                                     magit-status-mode)))
                        nil
                      '(display-buffer-same-window)))))

    (with-eval-after-load 'magit-mode
      (add-hook 'after-save-hook 'magit-after-save-refresh-status t)))

  (use-package magit-todos
    :after magit
    :config
    (setq magit-todos-ignored-keywords '(""))
    (magit-todos-mode))
#+end_src

*** evil-mode & cohorts

#+begin_src emacs-lisp
  (use-package evil
    :init
    (setq evil-want-keybinding nil)
    (setq evil-undo-system 'undo-fu)
    :config
    ;; some modes are better off without evil
    (evil-set-initial-state 'bufler-list-mode 'emacs)
    (evil-set-initial-state 'dirvish-mode 'emacs)
    (evil-set-initial-state 'pdf-view-mode 'emacs)
    (evil-set-initial-state 'org-agenda-mode 'emacs)
    (evil-set-initial-state 'dashboard-mode 'emacs)

    (evil-set-leader 'normal (kbd ";"))
    (evil-mode))
  (use-package evil-commentary
    :after evil
    :config
    (add-hook 'prog-mode-hook 'evil-commentary-mode))
  (use-package evil-collection
    ;:diminish evil-collection-unimpaired-mode
    :after evil
    :config
    (evil-collection-init))
  (use-package evil-snipe
    ;:diminish evil-snipe-local-mode
    :after evil
    :config
    (evil-snipe-mode +1))
  (use-package undo-fu
    :after evil
    :config
    (evil-define-key 'normal 'global "\C-r" 'evil-redo))
  (use-package evil-mc
    :after evil
    :config
    (evil-define-key 'visual evil-mc-key-map
      "A" #'evil-mc-make-cursor-in-visual-selection-end
      "I" #'evil-mc-make-cursor-in-visual-selection-beg)
    (global-evil-mc-mode 1))
#+end_src

*** themes

#+begin_src emacs-lisp
  (use-package theme-magic
    :config
    (theme-magic-export-theme-mode))
  ;;(use-package base16-theme
  ;;  :defer t)
  (use-package cyberpunk-theme)
  (use-package monokai-pro-theme
    :defer t)
  (use-package kaolin-themes
    :defer t)
  (use-package ef-themes
    :defer t)

  ;; icons
  (use-package all-the-icons
    :if (display-graphic-p))
#+end_src

*** modeline

#+begin_src emacs-lisp
  (use-package mini-modeline
    :defer t
    ;:diminish mini-modeline-mode
  )

  (require 'awesome-tray)
  ;; module setup
  (setq awesome-tray-active-modules '(
                                      "evil" "location" "file-path" "mode-name" "git"
                                      ))

  ;; appearance
  (setq awesome-tray-mode-line-active-color #ffffff)

  (setq awesome-tray-git-show-status t  ; "show current file status on the git module"
        awesome-tray-evil-show-mode t   ; "show current evil mode in the evil module"
        awesome-tray-evil-show-macro t  ; "show recording macro in the evil module"
  )

  ;; reload on theme change
  (add-hook 'after-load-theme-hook (lambda () (awesome-tray-enable)))
#+end_src

*** hl-todo

#+begin_src emacs-lisp
  (use-package hl-todo
    :config
    (global-hl-todo-mode))
#+end_src

*** emacs-dashboard

#+begin_src emacs-lisp
  (use-package dashboard
    :config
    (dashboard-setup-startup-hook)
    (add-to-list 'dashboard-items '(agenda) t)
    (setq initial-buffer-choice (lambda () (get-buffer-create "*dashboard*")))
    :custom (
             (inhibit-start-screen t)
             ;(inital-buffer-choice (lambda () (get-buffer-create "*dashboard*")))
             (dashboard-set-init-info nil)
             (dashboard-set-footer nil)
             (dashboard-set-heading-icons t)
             (dashboard-center-content t)
             (dashboard-projects-switch-function 'counsel-projectile-switch-project-by-name)
             (dashboard-items '(
                                (recents . 5)
                                (projects . 10)
                                ))
             (dashboard-week-agenda t)
             ))
#+end_src

*** ivy

#+begin_src emacs-lisp
  (use-package ivy
    ;:diminish ivy-mode
    :init
    (setq ivy-use-virtual-buffers t
          enable-recursive-minbuffers t
          ivy-re-builders-alist '((t . ivy--regex-fuzzy))
          )
    :config
    (ivy-mode))
  (use-package flx)
  (use-package ivy-rich
    :init
    (ivy-rich-mode 1)
    (setcdr (assq t ivy-format-functions-alist) #'ivy-format-function-line)
    (setq ivy-rich-path-style 'abbrev))
  (use-package all-the-icons-ivy-rich
    :init (all-the-icons-ivy-rich-mode 1))
  (use-package counsel
    ;:diminish counsel-mode
    :after ivy
    :config
    (counsel-mode))
  (use-package swiper
    :defer t
    :after ivy
    :config
    (global-set-key "\C-s" 'swiper))
#+end_src

*** projectile

#+begin_src emacs-lisp
  (use-package projectile
    ;:diminish (projectile-mode . "Proj.")
  )
  (use-package counsel-projectile
    :after projectile
    :config
    (counsel-projectile-mode))
#+end_src

*** treemacs

#+begin_src emacs-lisp
  (use-package treemacs
    :defer t
    :init
    (global-set-key (kbd "C-c t") 'treemacs)
    :config
    (setq-default treemacs-use-follow-mode nil
                  treemacs-use-filewatch-mode t
                  treemacs-use-git-mode 'deferred))
  (use-package treemacs-all-the-icons
    :after treemacs
    :config
    (treemacs-load-theme "all-the-icons"))
  (use-package treemacs-evil
    :after (treemacs evil))
  (use-package treemacs-magit
    :after (treemacs magit))
  (use-package lsp-treemacs
    :after (treemacs lsp-mode)
    :config
    (setq lsp-headerline-breadcrumb-enable nil)
    (lsp-treemacs-sync-mode))
#+end_src

*** which-key

#+begin_src emacs-lisp
  (use-package which-key
    :config
    (setq which-key-show-early-on-C-h t
          which-key-popup-type 'frame
          )
  )
#+end_src


** Programming & LSP

Configuration for packages specific to programming and LSP environments.

*** dtrt-indent

#+begin_src emacs-lisp
  (use-package dtrt-indent
    ;:diminish "DI"
    :hook prog-mode)
#+end_src

*** tree-sitter

TODO: tree-sitter comes bundled with Emacs 29.
      Check back here and see if any changes need made.

#+begin_src emacs-lisp
  (use-package tree-sitter
    :config
    (global-tree-sitter-mode))
  (use-package tree-sitter-langs
    :config
    (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode))
#+end_src

*** yasnippet

#+begin_src emacs-lisp
  (use-package yasnippet
    ;:diminish yas-minor-mode
    )
#+end_src

*** company

#+begin_src emacs-lisp
  (use-package company
    :hook (prog-mode . company-mode)
    :init
    (setq company-minimum-prefix-length 1
          company-idle-delay 0.0
          company-show-numbers t
          company-transformers nil
          company-lsp-async t
          company-lsp-cache-candidates nil
          company-backends '((
                              company-yasnippet
                              company-dabbrev-code
                              company-capf
                              company-keywords
                              company-files
                              ))
          ))

  (use-package company-box
    :hook (company-mode . company-box-mode))

  (use-package company-quickhelp
    :hook (company-mode . company-quickhelp-mode)
    :config
    (setq company-quickhelp-delay 0.4))
#+end_src

*** flycheck

#+begin_src emacs-lisp
  (use-package flycheck
    :defer t
    :hook (prog-mode . flycheck-mode)
    :config
    (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc)))
#+end_src

*** lsp-mode

TODO: eglot comes bundled with Emacs 29.
      Test and compare to lsp-mode.

#+begin_src emacs-lisp
  (use-package lsp-mode
    :after yasnippet
    :defer t
    :init
    ;; hooks for individual languages
    (add-hook 'c-mode-hook 'lsp)
    ;; hooks for other modes thait tie into lsp-mode
    (add-hook 'prog-mode-hook	'yas-minor-mode)
    :config

    ;; yasnippet loads prior to this
    (yas-reload-all)

    ;; direct lsp config
    (setq lsp-lens-enable nil
          lsp-diagnostics-provider :flycheck
          lsp-prefer-flymake nil))

  (use-package lsp-ui
    :after lsp-mode
    :config
    (define-key lsp-ui-mode-map [remap xref-find-definitions] #'lsp-ui-peek-find-definitions)
    (define-key lsp-ui-mode-map [remap xref-find-references] #'lsp-ui-peek-find-references)

    ;; lsp-ui-doc
    ;; NOTE: there's gotta be some redundancy here somewhere
    (lsp-ui-doc-mode)
    (setq lsp-ui-doc-enable t
          lsp-ui-doc-show-with-cursor t
          lsp-ui-doc-show-with-mouse t
          lsp-ui-doc-delay 0.5
          lsp-ui-peek-enable t
          lsp-ui-sideline-show-diagnostics t
          )
    )
#+end_src

*** dockerfile-mode

#+begin_src emacs-lisp
  (use-package dockerfile-mode
    :defer t
    :init
    (add-to-list 'auto-mode-alist '("Dockerfile\\'" . dockerfile-mode))
    (put 'dockerfile-image-name 'safe-local-variable #'stringp))
#+end_src

*** elpy

#+begin_src emacs-lisp
  (use-package elpy
    :defer t
    :init
    (advice-add 'python-mode :before 'elpy-enable))
#+end_src

*** go-mode

#+begin_src emacs-lisp
  (use-package go-mode
    :defer t
    :init
    (add-to-list 'auto-mode-alist '("\\.go\\'" . go-mode))
    (add-hook 'go-mode #'lsp-mode-deferred))
#+end_src

*** lsp-java

#+begin_src emacs-lisp
  (use-package lsp-java
    :config
    (add-hook 'java-mode-hook 'lsp))
#+end_src

*** lua-mode

#+begin_src emacs-lisp
  (use-package lua-mode
    :defer t
    :init
    (add-to-list 'auto-mode-alist '("\\.lua\\'" . lua-mode)))
#+end_src

*** nix-mode

#+begin_src emacs-lisp
  (use-package lsp-nix
    :ensure lsp-mode
    :after (lsp-mode)
    :demand t
    :custom
    (lsp-nix-nil-formatter ["nixpkgs-fmt"]))

  (use-package nix-mode
    :hook (nix-mode . lsp-deferred)
    :init
    (add-to-list 'auto-mode-alist '("\\.nix\\'" . nix-mode)))
#+end_src

*** yaml-mode

#+begin_src emacs-lisp
  (use-package yaml-mode
    :defer t
    :init
    (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode)))
#+end_src


** org-mode

*** General org-mode Settings

#+begin_src emacs-lisp
  (setq
    org-edit-src-content-indentation 2
    org-hide-emphasis-markers t         ;; hide * and whatnot
    org-src-tab-acts-natively t
    org-startup-indented t
    line-spacing 3
  )
#+end_src

*** evil-org

Included here as opposed to the other evil packages because it is
specific to org-mode.

#+begin_src emacs-lisp
  (use-package evil-org
    :after org
    :hook (org-mode . (lambda () evil-org-mode))
    :config
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))
#+end_src

*** toc-org

#+begin_src emacs-lisp
  (use-package toc-org
    :defer t
    :init
    (add-hook 'org-mode-hook 'toc-org-mode))
#+end_src

*** org-superstar-mode

#+begin_src emacs-lisp
  (use-package org-superstar
    :defer t
    :init
    (add-hook 'org-mode-hook 'org-superstar-mode))
#+end_src

*** fountain-mode

#+begin_src emacs-lisp
  (use-package fountain-mode
    :init
    (add-to-list 'auto-mode-alist '("\\.fountain\\'" . fountain-mode)))
#+end_src

*** writeroom-mode

#+begin_src emacs-lisp
  (use-package writeroom-mode)
#+end_src

*** markdown-mode

#+begin_src emacs-lisp
  (use-package markdown-mode
    :defer t
    :commands (markdown-mode gfm-mode)
    :init
    (add-to-list 'auto-mode-alist '("\\.md\\'" . gfm-mode)))
#+end_src


** Miscelleneous

*** setq custom-file

#+begin_src emacs-lisp
  (setq custom-file "/home/hydra/.emacs.d/custom.el")
  (when (file-exists-p custom-file)
    (load custom-file))
#+end_src
